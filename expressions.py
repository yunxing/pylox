# This file was automatically generated by gen_ast.py.
from tokens import Token
from typing import List, Any

class ExprVisitor:
    def visit_assign_expr(self, node : "Assign"):
        raise NotImplementedError()
    def visit_binary_expr(self, node : "Binary"):
        raise NotImplementedError()
    def visit_call_expr(self, node : "Call"):
        raise NotImplementedError()
    def visit_grouping_expr(self, node : "Grouping"):
        raise NotImplementedError()
    def visit_get_expr(self, node : "Get"):
        raise NotImplementedError()
    def visit_set_expr(self, node : "Set"):
        raise NotImplementedError()
    def visit_literal_expr(self, node : "Literal"):
        raise NotImplementedError()
    def visit_logical_expr(self, node : "Logical"):
        raise NotImplementedError()
    def visit_variable_expr(self, node : "Variable"):
        raise NotImplementedError()
    def visit_unary_expr(self, node : "Unary"):
        raise NotImplementedError()
    def default_expr(self, node):
        pass

class Expr:
    def accept(self, visitor : ExprVisitor):
        if isinstance(self, Assign):
            return visitor.visit_assign_expr(self)
        if isinstance(self, Binary):
            return visitor.visit_binary_expr(self)
        if isinstance(self, Call):
            return visitor.visit_call_expr(self)
        if isinstance(self, Grouping):
            return visitor.visit_grouping_expr(self)
        if isinstance(self, Get):
            return visitor.visit_get_expr(self)
        if isinstance(self, Set):
            return visitor.visit_set_expr(self)
        if isinstance(self, Literal):
            return visitor.visit_literal_expr(self)
        if isinstance(self, Logical):
            return visitor.visit_logical_expr(self)
        if isinstance(self, Variable):
            return visitor.visit_variable_expr(self)
        if isinstance(self, Unary):
            return visitor.visit_unary_expr(self)
        return visitor.default_expr(self)

class Assign(Expr):
    def __init__(self , name : Token, value : Expr):
        self.name : Token = name
        self.value : Expr = value
    def __str__(self):
        r = "Assign("
        r += f"name : Token = "
        r += str(self.name)
        r += ","

        r += f"value : Expr = "
        r += str(self.value)
        r += ","

        r += ")"
        return r
class Binary(Expr):
    def __init__(self , left : Expr, operator : Token, right : Expr):
        self.left : Expr = left
        self.operator : Token = operator
        self.right : Expr = right
    def __str__(self):
        r = "Binary("
        r += f"left : Expr = "
        r += str(self.left)
        r += ","

        r += f"operator : Token = "
        r += str(self.operator)
        r += ","

        r += f"right : Expr = "
        r += str(self.right)
        r += ","

        r += ")"
        return r
class Call(Expr):
    def __init__(self , callee : Expr, paren : Token, arguments : List[Expr]):
        self.callee : Expr = callee
        self.paren : Token = paren
        self.arguments : List[Expr] = arguments
    def __str__(self):
        r = "Call("
        r += f"callee : Expr = "
        r += str(self.callee)
        r += ","

        r += f"paren : Token = "
        r += str(self.paren)
        r += ","

        r += f"arguments : List[Expr] = "
        r += str(self.arguments)
        r += ","

        r += ")"
        return r
class Grouping(Expr):
    def __init__(self , expression : Expr):
        self.expression : Expr = expression
    def __str__(self):
        r = "Grouping("
        r += f"expression : Expr = "
        r += str(self.expression)
        r += ","

        r += ")"
        return r
class Get(Expr):
    def __init__(self , object : Expr, name : Token):
        self.object : Expr = object
        self.name : Token = name
    def __str__(self):
        r = "Get("
        r += f"object : Expr = "
        r += str(self.object)
        r += ","

        r += f"name : Token = "
        r += str(self.name)
        r += ","

        r += ")"
        return r
class Set(Expr):
    def __init__(self , object : Expr, name : Token, value : Expr):
        self.object : Expr = object
        self.name : Token = name
        self.value : Expr = value
    def __str__(self):
        r = "Set("
        r += f"object : Expr = "
        r += str(self.object)
        r += ","

        r += f"name : Token = "
        r += str(self.name)
        r += ","

        r += f"value : Expr = "
        r += str(self.value)
        r += ","

        r += ")"
        return r
class Literal(Expr):
    def __init__(self , value : Any):
        self.value : Any = value
    def __str__(self):
        r = "Literal("
        r += f"value : Any = "
        r += str(self.value)
        r += ","

        r += ")"
        return r
class Logical(Expr):
    def __init__(self , left : Expr, operator : Token, right : Expr):
        self.left : Expr = left
        self.operator : Token = operator
        self.right : Expr = right
    def __str__(self):
        r = "Logical("
        r += f"left : Expr = "
        r += str(self.left)
        r += ","

        r += f"operator : Token = "
        r += str(self.operator)
        r += ","

        r += f"right : Expr = "
        r += str(self.right)
        r += ","

        r += ")"
        return r
class Variable(Expr):
    def __init__(self , name : Token):
        self.name : Token = name
    def __str__(self):
        r = "Variable("
        r += f"name : Token = "
        r += str(self.name)
        r += ","

        r += ")"
        return r
class Unary(Expr):
    def __init__(self , operator : Token, right : Expr):
        self.operator : Token = operator
        self.right : Expr = right
    def __str__(self):
        r = "Unary("
        r += f"operator : Token = "
        r += str(self.operator)
        r += ","

        r += f"right : Expr = "
        r += str(self.right)
        r += ","

        r += ")"
        return r

