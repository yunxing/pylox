# This file was automatically generated by gen_ast.py.
from tokens import Token
from typing import List, Any
from expressions import Expr


class StmtVisitor:
    def visit_expression(self, node: "Expression"):
        pass

    def visit_print(self, node: "Print"):
        pass

    def default(self, node):
        pass


class Stmt:
    def accept(self, visitor: StmtVisitor):
        if isinstance(self, Expression):
            return visitor.visit_expression(self)
        if isinstance(self, Print):
            return visitor.visit_print(self)
        return visitor.default(self)


class Expression(Stmt):
    def __init__(self, expression: Expr):
        self.expression: Expr = expression

    def __str__(self):
        r = "Expression("
        r += f"expression : Expr = "
        r += str(self.expression)
        r += ","

        r += ")"
        return r


class Print(Stmt):
    def __init__(self, expression: Expr):
        self.expression: Expr = expression

    def __str__(self):
        r = "Print("
        r += f"expression : Expr = "
        r += str(self.expression)
        r += ","

        r += ")"
        return r
