from io import FileIO
from typing import List


def define_ast(output_file: FileIO, base_name: str, types: List[str]):
    # First write some comments. 
    output_file.write("# This file was automatically generated by gen_ast.py.\n")
    output_file.write("import dataclasses\n")
    output_file.write("import tokens\n")
    output_file.write("from typing import List, Any\n")
    output_file.write(f"class {base_name}:\n")
    output_file.write(f"    pass\n")

    for type in types:
        class_name = type.split(":")[0].strip()
        fields = type.split(":")[1].strip()
        define_type(output_file, base_name, class_name, fields)
    output_file.write("\n")


def define_type(output_file: FileIO, base_name: str, class_name: str, fields: str):
    output_file.write(f"@dataclasses.dataclass\n")
    output_file.write(f"class {class_name}({base_name}):\n")
    for field in fields.split(","):
        field = field.strip()
        field_type = field.split(" ")[0]
        field_name = field.split(" ")[-1]
        output_file.write(f"    {field_name} : {field_type}\n")


def main():
    # Generate an ast.py file in a command line argument <output directory>.
    import argparse
    import sys
    import os
    argparser = argparse.ArgumentParser(
        description='Generate a ast.py file in a command line argument <output directory>.')
    # The argument is the path to the file to be generated.
    argparser.add_argument(
        'output_directory', help='The output directory')
    args = argparser.parse_args()
    if not os.path.exists(args.output_directory):
        print('The output directory does not exist.')
        sys.exit(1)
    if not os.path.isdir(args.output_directory):
        print('The output directory is not a directory.')
        sys.exit(1)
    # Generate the ast.py file.
    output_file = open(os.path.join(args.output_directory, 'ast.py'), 'w')
    define_ast(output_file, "Expr", [
        "Binary : Expr left, Token operator, Expr right",
        "Grouping : Expr expression",
        "Literal : Any value",
        "Unary : Token operator, Expr right",
    ])


if __name__ == '__main__':
    main()
